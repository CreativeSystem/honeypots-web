{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/kros/Desktop/www/creative/HoneyPots/honeypots-web/src/contexts/AuthContext.tsx\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { api } from \"@/api\";\nimport ApiStatus from \"@/enums/ApiStatus\";\nimport usePersistedState from \"@/hooks/usePersistedState\";\nconst AuthContext = /*#__PURE__*/createContext({});\n\nconst AuthContextProvider = ({\n  children\n}) => {\n  const {\n    0: isSigned,\n    1: setIsSigned\n  } = useState(null);\n  const [token, setToken] = usePersistedState(\"@token\", null);\n  const {\n    0: id,\n    1: setId\n  } = useState(\"\");\n  useEffect(() => {\n    async function validate() {\n      try {\n        const response = await api.post(\"user/verify/\");\n\n        if (response.status !== 200) {\n          setIsSigned(false);\n        } else {\n          setIsSigned(true);\n          setId(response.data.id);\n        }\n      } catch (err) {\n        setIsSigned(false);\n      }\n    }\n\n    if (token) {\n      api.defaults.headers.Authorization = `Bearer ${token}`;\n      validate();\n    } else {\n      setIsSigned(false);\n    }\n  }, [token]);\n\n  async function logIn(email, password) {\n    try {\n      const response = await api.post(\"token/\", {\n        email: email,\n        password: password\n      });\n\n      if (response.status !== 200) {\n        return ApiStatus.HTTP_400_BAD_REQUEST;\n      }\n\n      setToken(response.data.access);\n      api.defaults.headers.Authorization = `Bearer ${response.data.access}`;\n      setIsSigned(true);\n      return ApiStatus.HTTP_200_OK;\n    } catch (err) {\n      return ApiStatus.ERROR;\n    }\n  }\n\n  async function register(name, email, password) {\n    try {\n      await api.post(\"user/create-find/\", {\n        name: name,\n        email: email,\n        password: password\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  function logOut() {\n    setToken(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      id,\n      isSigned,\n      token,\n      logIn,\n      register,\n      logOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\nexport { AuthContext, AuthContextProvider };","map":{"version":3,"sources":["/home/kros/Desktop/www/creative/HoneyPots/honeypots-web/src/contexts/AuthContext.tsx"],"names":["createContext","useEffect","useState","api","ApiStatus","usePersistedState","AuthContext","AuthContextProvider","children","isSigned","setIsSigned","token","setToken","id","setId","validate","response","post","status","data","err","defaults","headers","Authorization","logIn","email","password","HTTP_400_BAD_REQUEST","access","HTTP_200_OK","ERROR","register","name","error","Error","logOut"],"mappings":"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","sourcesContent":["import { createContext, useEffect, useState } from \"react\"\n\nimport { api } from \"@/api\"\nimport ApiStatus from \"@/enums/ApiStatus\"\nimport usePersistedState from \"@/hooks/usePersistedState\"\n\nexport interface AuthContextData {\n  id: string\n  isSigned: boolean | null\n  token: string | null\n  logIn(email: string, password: string): Promise<ApiStatus>\n  register(name: string, email: string, password: string): void\n  logOut(): void\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData)\n\nconst AuthContextProvider: React.FC = ({ children }) => {\n  const [isSigned, setIsSigned] = useState<boolean | null>(null)\n  const [token, setToken] = usePersistedState<string | null>(\"@token\", null)\n  const [id, setId] = useState<string>(\"\")\n\n  useEffect(() => {\n    async function validate() {\n      try {\n        const response = await api.post(\"user/verify/\")\n\n        if (response.status !== 200) {\n          setIsSigned(false)\n        } else {\n          setIsSigned(true)\n          setId(response.data.id)\n        }\n      } catch (err) {\n        setIsSigned(false)\n      }\n    }\n\n    if (token) {\n      api.defaults.headers.Authorization = `Bearer ${token}`\n\n      validate()\n    } else {\n      setIsSigned(false)\n    }\n  }, [token])\n\n  async function logIn(email: string, password: string): Promise<ApiStatus> {\n    try {\n      const response = await api.post(\"token/\", {\n        email: email,\n        password: password\n      })\n\n      if (response.status !== 200) {\n        return ApiStatus.HTTP_400_BAD_REQUEST\n      }\n\n      setToken(response.data.access)\n\n      api.defaults.headers.Authorization = `Bearer ${response.data.access}`\n\n      setIsSigned(true)\n\n      return ApiStatus.HTTP_200_OK\n    } catch (err) {\n      return ApiStatus.ERROR\n    }\n  }\n\n  async function register(name: string, email: string, password: string) {\n    try {\n      await api.post(\"user/create-find/\", {\n        name: name,\n        email: email,\n        password: password\n      })\n    } catch (error) {\n      throw new Error(error)\n    }\n  }\n\n  function logOut() {\n    setToken(null)\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ id, isSigned, token, logIn, register, logOut }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport { AuthContext, AuthContextProvider }\n"]},"metadata":{},"sourceType":"module"}